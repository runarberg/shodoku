import{a as G,S as o,I as F,p as L,m as A}from"./index-DM9RO-23.js";import{D as J,c as H,m as h,y as V}from"./index-DyCUo9BM.js";import{d,u as X,l as U}from"./db-DFxFyH6D.js";function M(){return async function(t){const e=[];for await(const n of t)e.push(n);return e}}function P(t){return async function*(e){for await(const n of e)t(n)&&(yield n)}}function Y(t){if(t<0){const e=-t;return async function*(n){const a=[];let s=0;for await(const r of n)a[s]=r,s=(s+1)%e;for(let r=0;r<a.length;r+=1)yield a[s],s=(s+1)%e}}return async function*(e){let n=0;for await(const a of e){if(n>=t)break;n+=1,yield a}}}const Q=1e3,k=60*Q,R=60*k,I=24*R,B=7*I,K=29.53*I,N=365.2425*I,j=new Date(0);function C(t=new Date){return new Date(t.getFullYear(),t.getMonth(),t.getDate())}function Z(t){const e=Math.abs(t);return e<1.5*k?{unit:"second",multiplier:Q,value:t/Q}:e<1.5*R?{unit:"minute",multiplier:k,value:t/k}:e<1.5*I?{unit:"hour",multiplier:R,value:t/R}:e<B?{unit:"day",multiplier:I,value:t/I}:e<K?{unit:"week",multiplier:B,value:t/B}:e<N?{unit:"month",multiplier:K,value:t/K}:{unit:"year",multiplier:N,value:t/N}}const _=new Intl.RelativeTimeFormat("default",{numeric:"always",style:"short"});function we(t){const{unit:e,value:n}=Z(t);return _.format(Math.round(n),e)}function fe(t){return new Promise(e=>{globalThis.setTimeout(e,t)})}async function*ee(t){const e=new Set;let n=await(await d).transaction("progress").store.index("state+due").openCursor();for(;n;){const[a,s]=n.key;if(a<o.Learning){n=await n.continue([o.Learning,j]);continue}if(a>o.Learning&&a<o.Relearning){n=await n.continue([o.Relearning,j]);continue}{const[r]=n.primaryKey;e.has(r)||(yield n,e.add(r))}n=await n.continue()}}async function q(){const t=new Set,e=(await d).transaction("reviews").store.index("review").iterate(IDBKeyRange.lowerBound(C()));for await(const n of e)t.add(n.value.cardId);return t}async function te(){const t=new Date;return(await d).transaction("reviews").store.index("state+review").count(IDBKeyRange.bound([o.New,C()],[o.New,t],!0,!0))}async function*ne(){const t=await q(),e=(await d).transaction(["decks","progress"]),n=e.objectStore("progress"),a=new Set;for await(const{value:s}of e.objectStore("decks").index("priority"))if(s.active){for(const r of s.cards)if(!(a.has(r)||t.has(r)))for(const g of["kanji-write","kanji-read"]){const m=await n.get([r,g]);if(m?.fsrs.state===o.New){yield m;break}}}}async function ae(){const t=new Date;return(await d).transaction("reviews").store.index("state+review").count(IDBKeyRange.bound([o.Review,C()],[o.Review,t],!1,!0))}async function*re(){const t=new Date,e=await q(),n=(await d).transaction(["decks","progress","reviews"],"readonly"),s=n.objectStore("decks").index("cards"),r=n.objectStore("progress"),g=IDBKeyRange.bound([o.Review,j],[o.Review,t],!1,!0),m=new Set;let v=await r.index("state+due").openCursor(g);for(;v;){const[D]=v.primaryKey;!m.has(D)&&!e.has(D)&&await s.getKey(IDBKeyRange.only(D))&&(yield v),v=await v.continue()}}async function se(){const t=await(await d).getAllFromIndex("review-limits","time",IDBKeyRange.lowerBound(C())),e={due:0,new:0};for(const{count:n}of t)e.due+=n.due,e.new+=n.new;return e}async function ie({cardId:t,cardType:e},n){const a=(await d).transaction(["progress","reviews"],"readwrite"),s=a.objectStore("progress"),r=a.objectStore("reviews");await s.put({cardId:t,cardType:e,fsrs:n.card});const g=await r.add({cardId:t,cardType:e,log:n.log});G([{store:"progress",op:"put",key:[t,e]},{store:"reviews",op:"add",key:g}]),await a.done}const E=F("shodoku.app.preferences.limit.due",50),T=F("shodoku.app.preferences.limit.new",10),ve=F("shodoku.app.preferences.fsrs.fuzz-enabled",!0);async function ge(t={new:T.value,due:E.value}){return await(await d).add("review-limits",{time:new Date,count:t}),U.postMessage("review-limit-increased")}const oe=J("reviews",()=>{const t=h(!1),e=h([]),n=h([]),a=h([]),s=h(0),r=h(0),g=H(()=>{const c=new Date;let i=0,w=0,l=0,u=e.value.at(i);const f=[];for(;u&&u.fsrs.due<c;)f.push(u),i+=1,u=e.value.at(i);const S=n.value.length,b=a.value.length,W=S+s.value,O=b+r.value,z=Math.ceil((O+W)/O),$=Math.floor(z/2);let p=n.value.at(w),y=a.value.at(l);for(;p||y;){if(!y){p&&f.push(p),w+=1,p=n.value.at(w);continue}if(!p){y&&f.push(y),l+=1,y=a.value.at(l);continue}(s.value+w+r.value+l)%z===$?(f.push(y),l+=1,y=a.value.at(l)):(f.push(p),w+=1,p=n.value.at(w))}for(;u;)f.push(u),i+=1,u=e.value.at(i);return f});async function m({cardId:c,cardType:i,fsrs:w},l){if(w.state===o.New?(a.value=a.value.filter(u=>u.cardId!==c),r.value+=1):w.state===o.Review?(n.value=n.value.filter(u=>u.cardId!==c),s.value+=1):e.value=e.value.filter(u=>u.cardId!==c),l.card.state===o.Learning||l.card.state===o.Relearning){const u={cardId:c,cardType:i,fsrs:l.card},f=l.card.due,S=e.value.findIndex(b=>f<b.fsrs.due);e.value=e.value.toSpliced(S===-1?e.value.length:S,0,u)}await ie({cardId:c,cardType:i},l),U.postMessage("card-review")}function v(c){return e.value.some(i=>i.cardId===c)}function D(c){return n.value.some(i=>i.cardId===c)}async function x(){t.value=!0;try{const c=await se();s.value=await ae(),r.value=await te(),e.value=await L(ee(),A(i=>i.value),M()),n.value=await L(re(),P(({primaryKey:[i]})=>!v(i)),Y(Math.max(0,E.value+c.due-s.value)),A(i=>i.value),M()),a.value=await L(ne(),P(({cardId:i})=>!v(i)&&!D(i)),Y(Math.max(0,T.value+c.new-r.value)),M())}finally{t.value=!1}}return x(),setTimeout(x,R),V([E,T],x),{refreshing:t,learningQueue:e,dueQueue:n,newQueue:a,queue:g,refreshQueues:x,rateCard:m}});function pe(){const t=oe();return H(()=>({due:t.dueQueue.length,new:t.newQueue.length,learning:t.learningQueue.length}))}function ye(){const{result:t}=X(async()=>{const e=new Map,n=(await d).transaction("reviews").store.index("review");for await(const a of n.iterate(IDBKeyRange.lowerBound(C()))){const s=a.value;let r=e.get(s.cardId);r||(r=[],e.set(s.cardId,r)),r.push(s)}return e});return t}export{ye as a,we as b,oe as c,ve as d,E as e,P as f,ge as i,T as n,fe as s,pe as u};
